type: edu
files:
- name: src/chucknorris/Main.java
  visible: true
  text: |-
    package chucknorris;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ChuckNorrisTest.java
  visible: false
  text: |-
    import org.assertj.swing.util.Pair;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class ChuckNorrisTest extends StageTest {

      @DynamicTest()
      CheckResult test() {
        TestedProgram pr = new TestedProgram();
        String output = pr.start().strip();
        List<String> list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));

        if(list.size()!=1 || !list.get(0).contains("Please input operation (encode/decode/exit):")){
          return CheckResult.wrong("When the program just started, output should contain exactly 1 non-empty line, " +
                  "containing \"Please input operation (encode/decode/exit):\" as it shown in the example, followed by an input");
        }

        output = pr.execute("encode").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=1 || !list.get(0).contains("input string")){
          return CheckResult.wrong("When the user has chosen \"encode\" as an operation, there should be printed exactly 1 " +
                  "non-empty line, containing \"input string\" substring, followed by an input");
        }
        output = pr.execute("H W!").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=3 || !list.get(0).contains("encoded string") ||
                !list.get(2).contains("please input operation (encode/decode/exit):")){
          return CheckResult.wrong("When the user provided a string for encoding, there should be printed exactly 3 " +
                  "non-empty lines, the first one with \"encoded string\" substring, the second one, with an encoded string," +
                  "and the last one is \"Please input operation (encode/decode/exit):\" as an operation is finished and" +
                  "the program is looped");
        }
        if(!list.get(1).contains("0 0 00 00 0 0 00 0000 0 0 00 00000 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0")){
          return CheckResult.wrong("When the user provided a string for encoding, the second non-empty " +
                  "line of an output should contain an encoded string. Make sure, that encryption is correct and the " +
                  "encoding of a single character sequence is not separated.");
        }

        output = pr.execute("decode").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=1 || !list.get(0).contains("encoded string")){
          return CheckResult.wrong("When the user has chosen \"decode\" as an operation, there should be printed exactly 1 " +
                  "non-empty line, containing \"encoded string\" substring, followed by an input");
        }
        output = pr.execute("0 0 00 00 0 0 00 0000 0 0 00 00000 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0").strip().toLowerCase();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=3 || !list.get(0).contains("decoded string") ||
                !list.get(2).contains("please input operation (encode/decode/exit):")){
          return CheckResult.wrong("When the user provided a string for decoding, there should be printed exactly 3 " +
                  "non-empty lines, the first one with \"decoded string\" substring, the second one, with a decoded string," +
                  "and the last one is \"Please input operation (encode/decode/exit):\" as an operation is finished and" +
                  "the program is looped");
        }
        if(!list.get(1).contains("h w!")){
          return CheckResult.wrong("When the user provided a string for decoding, the second non-empty " +
                  "line of an output should contain a decoded string. Make sure, that decryption is correct.");
        }

        output = pr.execute("Hello world!").strip();
        list = new ArrayList<>(Arrays.asList(output.split("\n")));
        list.removeAll(Arrays.asList(""));
        if(list.size()!=2 || !list.get(0).contains("There is no 'Hello world!' operation") ||
                !list.get(1).contains("Please input operation (encode/decode/exit):")){
            return CheckResult.wrong("When the user had chosen an operation, that is not \"decode\", \"encode\" or \"exit\"," +
                    " there should be printed exactly 2 non-empty lines, the one that contains " +
                    "\"There is no '<user's input>' operation\" substring, and the \"Please input operation" +
                    " (encode/decode/exit):\" one as the program is looped");
        }
        for(String s : new String[]{"hello world!",
                "0 0 00 00 0 0 00 0000 0 0 00 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0",
                "0 0 00 00 0 0 00 000 0 0 00 0000 0 0 00 0 0 0 00 0 0 000 00 0 0 0 00 0000 0 0",
                "0 0 00 00 0 0 000 000"}) {
          pr.execute("decode");
          output = pr.execute(s).strip().toLowerCase();
          list = new ArrayList<>(Arrays.asList(output.split("\n")));
          list.removeAll(Arrays.asList(""));
          if (list.size() != 2 || !list.get(0).contains("not valid") ||
                  !list.get(1).contains("please input operation (encode/decode/exit):")) {
            return CheckResult.wrong("When the user provided not valid encoded string, there should be printed exactly 2 " +
                    "non-empty lines, the one that contains \"not valid\" substring, and the \"Please input " +
                    "operation (encode/decode/exit):\" one as an operation is finished and the program is looped");
          }
        }
        output = pr.execute("exit").strip().toLowerCase();
        if(!output.contains("bye") || !pr.isFinished()){
          return CheckResult.wrong("When the user has chosen \"exit\" as an operation, there should be \"Bye\" substring" +
                  " in output and the program should finish it's execution");
        }
        return CheckResult.correct();
      }
    }
  learner_created: false
- name: src/chucknorris/EncoderProcessor.java
  visible: true
  text: |
    package chucknorris;

    import java.util.Scanner;

    public class EncoderProcessor {
        private final Scanner scanner;

        public EncoderProcessor(Scanner scanner) {
            this.scanner = scanner;
        }

        public void run() {
    //        encode();
            decode();
        }

        private void encode() {
            String input = getInput();

            System.out.println("\nThe result:");

            //empty string
            if (input.length() == 0) {
                System.out.println();
                return;
            }

            String binaryString = stringToBinary(input);
            System.out.println(binaryToUnary(binaryString));
        }

        private String getInput() {
            System.out.println("Input string:");
            return scanner.nextLine();
        }

        //take output string and convert into char array
        //for every letter in char array convert that into binary
        private String stringToBinary(String input) {
            StringBuilder builder = new StringBuilder();
            char[] charArray = input.toCharArray();

            for (char c : charArray) {
                String binary = charToBinary(c);
                builder.append(binary);
            }

            return builder.toString();
        }

        //helper method
        private String charToBinary(char c) {
            StringBuilder stringBuilder = new StringBuilder();
            String conversion = Integer.toBinaryString(c);

            stringBuilder.append("0".repeat(Math.max(0, 7 - conversion.length())));

            stringBuilder.append(conversion);
            return stringBuilder.toString();
        }

        private void decode() {
            String input = getEncodedInput();
            System.out.println("\nThe result:");

            //edge case
            if (input.length() == 0) {
                System.out.println();
                return;
            }

            String binaryString = decodeUnary(input);
            assert binaryString != null;
            System.out.println(decodeBinary(binaryString));
        }


        private String getEncodedInput() {
            System.out.println("Input encoded string:");
            return scanner.nextLine();
        }

        private String binaryToUnary(String input) {
            StringBuilder builder = new StringBuilder();

            //initialize the string with prefix and minimum 1 char
            appendPrefix(builder, input.charAt(0));
            builder.append("0");

            for (int i = 1; i < input.length(); i++) {
                if (input.charAt(i - 1) != input.charAt(i)) {
                    builder.append(" ");
                    appendPrefix(builder, input.charAt(i));
                }
                builder.append("0");
            }

            return builder.toString();
        }

        //helper method
        private void appendPrefix(StringBuilder builder, char prefix) {
            if (prefix == '1') {
                builder.append("0 ");
            } else {
                builder.append("00 ");
            }
        }

        //helper method
        private String decodePrefix(String prefix) {
            return prefix.equals("00") ? "0" : "1";
        }

        private String decodeUnary(String unaryString) {
            String[] chunks = unaryString.split(" ");
            StringBuilder builder = new StringBuilder();
            String prefix = "";
            if (chunks.length < 2) {
                //error here bad string
                return null;
            }

            for (int i = 0; i < chunks.length; i++) {
                if (i % 2 == 0) {
                    prefix = decodePrefix(chunks[i]);
                } else {
                    builder.append(prefix.repeat(chunks[i].length()));
                }
            }


            return builder.toString();
        }

        private String decodeBinary(String binaryString) {
            StringBuilder decoded = new StringBuilder();
            int length = binaryString.length();
            //
            for (int i = 0; i < length; i += 7) {
                String ascii = binaryString.substring(0, 7);
                binaryString = binaryString.substring(7);
                int binary = Integer.parseInt(ascii, 2);
                decoded.append((char) binary);
            }
            return decoded.toString();
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/23028#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 19 Apr 2023 14:07:13 UTC"
record: -1
